!<arch>
0-isupper.c/    0           0     0     644     260       `
#include "main.h"
/**
 *  _isupper - function that verifies if a  character is uppercase or not
 *  @c: tested character
 *  Return: returns 1 if it is uppercase , 0 if not
 */
int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);

	return (0);
}
0-memset.c/     0           0     0     644     303       `
#include <stdio.h>
#include "main.h"
/**
 *  _memset - function that fills memory with a constant byte.
 * @s: character.
 * @b: character.
 * @n: unsigned integer.
 * Return: s.
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int a;

for (a = 0; a < n; a++)
{
	s[a] = b;
}
return (s);
}

0-putchar.c/    0           0     0     644     321       `
#include "main.h"
/**
 * main-"The program prints _putchar followed by a new line"
 * File: "0-putchar.c"
 * Return: "Always 0 (Success)"
 */

int main(void)
{
	_putchar('_');
	_putchar('p');
	_putchar('u');
	_putchar('t');
	_putchar('c');
	_putchar('h');
	_putchar('a');
	_putchar('r');

	_putchar('\n');
	return (0);
}

0-strcat.c/     0           0     0     644     432       `
#include "main.h"
/**
 * _strcat - function that concatenates two strings.
 * @dest: pointer to destination string.
 * @src: pointer to source string.
 *
 * Return: pointer to destination string.
 */
char *_strcat(char *dest, char *src)
{
	int length, j;

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     452       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 *
 * @s: the string
 *
 * Return: int
 */
int _atoi(char *s)
{
	unsigned int len = 0, size = 0, p = 1, res = 0, sign = 1, i = 0;

	while (*(s + len) != '\0')
	{
		if (size > 0 && (*(s + len) < '0' || *(s + len) > '9'))
			break;

		if (*(s + len) == '-')
			sign *= -1;

		if ((*(s + len) >= '0') && (*(s + len) <= '9'))
		{
			if (size > 0)
				p *= 10;

			size++;
		}
		len++;
	}
}
1-isdigit.c/    0           0     0     644     255       `
#include "main.h"
/**
 * _isdigit - function that verifies if a  character is a digit or not
 *  @c: tested character
 * Return: returns 1 if it is uppercase , 0 if not
 */

int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
		return (1);

	return (0);
}

1-memcpy.c/     0           0     0     644     350       `
#include "main.h"

/**
 * _memcpy - function that copies memory area.
 *
 * @dest: dest positions
 * @src: source position
 * @n: size of bytes
 * Return: char
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;
	unsigned int j = 0;

	while (i < n)
	{
		*(dest + i) = *(src + j);
		i += 1;
		j += 1;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     686       `
#include "main.h"
/**
 *  _strncat - function that concatenates two strings. it will use
 * at most n bytes from src. src does not need to be null terminated.
 *  @dest: pointer to destination string.
 *  @src: pointer to source string.
 *  @n: number of bytes to be concatenated.
 *
 *  Return: pointer to destination string.
 */
char *_strncat(char *dest, char *src, int n)
{
	int length, j;
	/* j is a counter for  n bytes of src to be concatenated */
	/* length = length of destination string */

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; j < n && src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     343       `
#include "main.h"
#include <stdio.h>

/**
 *  _strchr - function that locates a character in a string.
 *
 *  @s: string to receive and return
 *  @c: character to receive
 *  Return: char
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (*s == c)
		return (s);
	else
		return (NULL);
}

2-strlen.c/     0           0     0     644     262       `
#include "main.h"
/**
 * _strlen - Function that returns the length of a string
 *
 *  @s: this is the input string
 *
 *   Return: Lenngth of the string
 */
int _strlen(char *s)
{
	int index;

	for (index = 0; s[index] != '\0' ; index++)
		;
	return (index);
}
2-strncpy.c/    0           0     0     644     643       `
#include "main.h"
/**
 * _strncpy - a function that copies a string.
 * at most n bytes of src are copied.
 * if length of src is < n, additional null bytes are written to dest
 * to ensure that a total of n bytes are written.
 * @dest: pointer to destination string.
 * @src: pointer to source string.
 * @n: number of bytes to be used.
 *
 * Return: pointer to destination string.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int byteCount;

	for (byteCount = 0; byteCount < n && src[byteCount] != '\0'; byteCount++)
		dest[byteCount] = src[byteCount];
	for (; byteCount < n; byteCount++)
		dest[byteCount] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     216       `
#include "main.h"

/**
 * _islower - checks for lowercase characters.
 *
 * @c: character to be checked
 * Return: Always 0.
 */

int _islower(int c)

{
	if (c >= 'a' && c <= 'z')

	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     250       `
#include "main.h"
#include <stdio.h>

/**
 *  _puts - function that prints a string, followed by a new line, to stdout.
 *  @str: string
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
		_putchar (str[i]);
	_putchar ('\n');
}
3-strcmp.c/     0           0     0     644     488       `
#include "main.h"
/**
 * _strcmp - compares two strings.
 * @s1: pointer to first string.
 * @s2: pointer to second string.
 *
 * Return: value less than 0 if string is less than the other.
 * value greater than 0 if string is greater than the other.
 * 0 if strings are equal.
 */
int _strcmp(char *s1, char *s2)
{
	int counter, cmpVal;

	counter = 0;
	while (s1[counter] == s2[counter] && s1[counter] != '\0')
	{
		counter++;
	}
	cmpVal = s1[counter] - s2[counter];
	return (cmpVal);
}
3-strspn.c/     0           0     0     644     471       `
#include "main.h"

/**
 * _strspn - function that gets the length of a prefix substring.
 *
 * @s: initial segment
 * @accept: bytes to check
 *  Return: unsigned int
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int cont = 0;
	int j = 0;
	int flag;

	while (*s != '\0')
	{
		flag = 0;
		while (*(accept + j) != '\0')
		{
			if (*s == *(accept + j))
				flag = 1;
			j += 1;
		}
		j = 0;
		if (flag == 0)
			break;
		cont += 1;
		s++;
	}
	return (cont);
}

4-isalpha.c/    0           0     0     644     259       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: The character to check
 * Return: 1 if c is alphabet, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     456       `
#include "main.h"
#include <stdio.h>

/**
 *  _strpbrk - function that searches a string for any of a set of bytes.
 *
 *   @s: string to receive
 *   @accept: bytes to accept
 *  Return: char
 */

char *_strpbrk(char *s, char *accept)
{
	int j = 0;
	int flag;

	while (*s != '\0')
	{
		flag = 0;
		while (*(accept + j) != '\0')
		{
			if (*s == *(accept + j))
				flag = 1;
			j++;
		}
		j = 0;
		if (flag == 1)
			return (s);
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     483       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr -  function that locates a substring.
 * @haystack: initial string
 *  @needle: substring
 *  Return: char
 */
char *_strstr(char *haystack, char *needle)
{
	char *res;
	char *aux;

	while (*haystack != '\0')
	{
		res = haystack;
		aux = needle;

		while (*aux == *haystack && *aux != '\0'
				 && *haystack != '\0')
		{
			haystack++;
			aux++;
		}
		if (*aux == '\0')
			return (res);
		haystack = res + 1;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     178       `
#include "main.h"

/**
 *  _abs - compute the absolute value.
 *
 * @n: to be checked
 * Return: Always 0.
 */
int _abs(int n)
{
	if (n < 0)
	{
		n = (-1) * n;
	}
	return (n);
}
9-strcpy.c/     0           0     0     644     324       `
#include "main.h"

/**
 *_strcpy - Copiar el contenido de uno a otra variable
 * @dest: This is destiny
 * @src: This is the copia
 *
 * Return: This return copy
 */
char *_strcpy(char *dest, char *src)
{
	char *start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (start);
}
liball.a*.c/    0           0     0     644     8         `
!<arch>
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

